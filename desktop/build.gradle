apply plugin: "java"

sourceCompatibility = 1.11
sourceSets 
{
    main 
    {
        java 
        {
            srcDir 'src'
            srcDir 'assets'     
        }
    }
}

eclipse.project {
    name = appName + "-desktop"
}

project.ext.mainClassName = "jks.launcher.Launcher_Game"
project.ext.assetsDir = new File("../desktop/assets");
def propertiesFile = file('myFile.properties')

eclipse.project {
    name = appName + "-core"
}

// creates a slim JDK runtime for distribution
task createRuntime(type: Exec) {
    doFirst() {
        project.delete("${buildDir}/runtime")
    }
    String runtimePath = "${buildDir}/runtime"

    workingDir project.projectDir
    commandLine = [
            "${project.projectDir}/jpackage/bin/jlink",
            '-p', "${project.projectDir}/jpackage/jmods",
            '--add-modules', 'java.base,java.desktop,jdk.unsupported',
            '--strip-debug',
            '--no-header-files',
            '--no-man-pages',
            '--strip-native-commands',
            "--vm=server",
            "--compress=2",
            '--output', runtimePath
    ]
}

// creates application bundle (executable + runtime)
task jpackage(type: Exec, dependsOn: dist) {
    doFirst() {
        project.delete("${buildDir}/distribution/$project.appName")
    }
    dependsOn createRuntime
    workingDir project.projectDir
    def commands = [
            "${project.projectDir}/jpackage/bin/jpackage",
            '--output', "${buildDir}/distribution",
            '--input', "${buildDir}/libs",
            '--name', project.appName,
            '--main-class', project.mainClassName,
            '--main-jar', jar.archiveFile.get().asFile.getName(),
            '--runtime-image', "${buildDir}/runtime"
    ]
    
    if (osName.contains('windows')) {
        commands << '--icon'
        commands << "${project.projectDir}/logo.ico"
        commands << '--java-options'
        commands << "-splash:splash.png"
    } else if (osName.contains('linux')) {
        commands << '--icon'
        commands << "${project.projectDir}/logo.png"
        commands << '--java-options'
        commands << "-splash:splash.png"
    } else if (osName.contains('mac')) {
        commands << '--icon'
        commands << "${project.projectDir}/logo.icns"
        commands << '--java-options'
        commands << "-XstartOnFirstThread"
    }
    
    commandLine = commands
}
